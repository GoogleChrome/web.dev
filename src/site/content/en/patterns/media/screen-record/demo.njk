---
patternId: media/screen-record
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link
      rel="icon"
      href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üñ•Ô∏è</text></svg>"
    />
    <title>How to record screen</title>
    {# Include the GA object so we can start queuing events. #}
    {% include 'partials/analytics.njk' %}
    <style>
      :root {
        color-scheme: dark light;
      }
      html {
        box-sizing: border-box;
      }
      *,
      *:before,
      *:after {
        box-sizing: inherit;
      }
      body {
        margin: 1rem;
        font-family: system-ui, sans-serif;
      }
      button {
        display: block;
        margin-bottom: 4px;
      }
      video {
        display: block;
        margin-top: 10px;
        max-width: 100%;
        background: black;
        max-height: 480px;
      }
      pre {
        color: red;
        white-space: pre-line;
      }
    </style>
  </head>
  <body>
    <h1>How to record screen</h1>
    <button id="shareScreenButton">Share screen</button>
    <button id="startRecordButton" disabled>Start recording</button>
    <button id="stopRecordButton" disabled>Stop recording</button>
    <video autoplay muted playsinline></video>
    <pre id="logs"></pre>
    {% set script %}
      const video = document.querySelector('video');
      const shareScreenButton = document.querySelector('#shareScreenButton');
      const startRecordButton = document.querySelector('#startRecordButton');
      const stopRecordButton = document.querySelector('#stopRecordButton');

      let recorder;

      shareScreenButton.addEventListener("click", async () => {
        // Prompt user to share their screen.
        const stream = await navigator.mediaDevices.getDisplayMedia();
        recorder = new MediaRecorder(stream);
        // Preview screen locally.
        video.srcObject = stream;

        startRecordButton.disabled = false;
        log("Your screen is being shared.");
      });

      startRecordButton.addEventListener("click", async () => {
        // Prompt user to choose where to save the recording file.
        const suggestedName = "screen-record.webm";
        const handle = await window.showSaveFilePicker({ suggestedName });
        const writable = await handle.createWritable();

        // Start recording.
        recorder.start();
        recorder.addEventListener("dataavailable", async (event) => {
          // Write chunks to the file.
          await writable.write(event.data);
          if (recorder.state == "inactive") {
            // Close file when recording stops.
            await writable.close();
          }
        });

        stopRecordButton.disabled = false;
        log("Your screen is being recorded locally.");
      });

      stopRecordButton.addEventListener("click", () => {
        // Stop recording.
        recorder.stop();

        stopRecordButton.disabled = true;
        log("Your screen has been successfully recorded locally.");
      });

      /* Utils */

      function log(text) {
        document.querySelector('#logs').textContent += `${text}\r\n`;
      }

      window.onunhandledrejection = (event) => {
        log(`> ${event.reason}`);
      };
      window.onerror = (error) => {
        log(`> ${error}`);
      };
    {% endset %}
    <script>{{ script | minifyJs | cspHash | safe }}</script>
  </body>
</html>
