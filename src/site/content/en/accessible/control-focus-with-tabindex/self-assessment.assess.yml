setLeader: |
  Test your knowledge of tab order
height: unset
tabLabel: sample
questions:
  - stimulus: |
      This HTML renders a modal dialog:

      ```html
      <div role="dialog" aria-labelledby="dialog-header">
        <button aria-label="Close"></button>
        <h2 id="dialog-header">
          Do you want to allow notifications from this website?
        </h2>
        <button>No</button>
        <button>Yes</button>
      </div>
      ```
    type: think-and-check
    stem: What is the tab order for the elements in the sample?
    options:
      - rationale: |
          1. The **Close** button
          1. The **No** button
          1. The **Yes** button

          Only the `<button>` elements are included in the tab order
          because they're the only standardized HTML form elements.
          To insert other elements into the tab order, you would add a `tabindex` attribute.
  - stimulus: |
      ```html
      <section tabindex="-1">
        <h2>Cat facts</h2>
        <ul>
          <li>A group of cats is called a <a href="https://m-w.com/dictionary/clowder">clowder</a>.</li>
          <li>Most cats are <a href="https://www.catfacts.org/catnip.html"> unaffected by catnip</a>.</li>
        </ul>
      </section>
      ```
    type: think-and-check
    stem: Which elements from the sample are included in the tab order?
    options:
      - rationale: |
          Only the `<a>` elements are included in the tab order.

          The `<section>` element is not in the tab order
          because it has a negative `tabindex` value.
          (It can, however, be focused using the `focus()` method.)
          The `tabindex` value for the `<section>` element doesn't affect its children.
  - stimulus: |
      This HTML renders a popup menu followed by a search input:

      ```html
      <div role="menu" tabindex="0">
        <a role="menuitem" href="/learn/" tabindex="-1">Learn</a>
        <a role="menuitem" href="/measure/" tabindex="-1">Measure</a>
        <a role="menuitem" href="/blog/" tabindex="-1">Blog</a>
        <a role="menuitem" href="/about/" tabindex="-1">About</a>
      </div>
      <input tabindex="1" type="text" role="search" aria-label="Search" placeholder="Search">
      ```
    type: think-and-check
    stem: Which element in the sample comes first in the tab order?
    options:
      - rationale: |
          The **Search** text input comes first in the tab order.
          Because it has a `tabindex` greater than 1, it jumps to the front of the tab order.

          (This behavior is likely to cause confusion
          if the menu is positioned on the page before the search input.
          This is an example of why having a `tabindex` value greater than zero
          is considered an anti-pattern.)
  - stimulus: |
      This HTML renders a custom radio group, which should have a
      [roving `tabindex`](#create-accessible-components-with-"roving-tabindex").
      (To keep things simpler, ignore the
      [`aria-*` attributes](/semantics-and-screen-readers) for now.)

      ```html
      <div role="radiogroup" aria-labelledby="breed-header">
        <h3 id="breed-header">Your cat's breed</h3>
        <div role="radio" aria-checked="false" tabindex="0">Persian</div>
        <div role="radio" aria-checked="false" tabindex="-1">Bengal</div>
        <div role="radio" aria-checked="false" tabindex="-1">Maine Coon</div>
      </div>
      ```
    type: think-and-check
    stem: |
      When a `role="radio"` element is focused,
      what should happen when a user presses the `Right` arrow key?
    options:
      - rationale: |
          - Change the `tabindex` values for all radio elements in the group to -1.
          - If there's a radio element after the one that's focused,
          set its `tabindex` value to 0.
          - If there's no radio element after the one that's focused,
          set the `tabindex` value of the first radio element in the group to 0.
          - Focus the radio element that now has a `tabindex` of 0.

          That's a lotâ€”and it doesn't even include ARIA attributes!
          This is an example of why it's easier to use native elements
          with built-in keyboard behavior whenever you can.
