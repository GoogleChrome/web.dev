{% for item in inlineScripts %}
  {% set inlineScript %}
    {% includeRaw item %}
  {% endset %}
  <script>{{ inlineScript | minifyJs | cspHash | safe }}</script>
{% endfor %}

{# Sourced scripts cannot be authorized by a CSP hash individually, so we need
to use an inline script loader for any sourced scripts. #}
{# This works because the CSP includes the 'strict-dynamic' keyword, allowing
the children of an authorized script to run. #}
{% set scriptLoader %}
function loadScript(url, type) {
  const s = document.createElement('script');
  s.src = url;
  s.onload = () => {
    document.dispatchEvent(new CustomEvent('scriptLoaded', {detail: {url}}));
  }
  if (type) {
    s.type = type;
  }
  if (type === 'module') {
    s.async = false; // Preserve load order.
    const pre = document.createElement('link');
    pre.rel = 'modulepreload';
    pre.href = url;
    document.head.append(pre);
    // We use DOMContentLoaded as the loader script is running sync, and inserting a module script here doesn't defer. This brings back normal type="module" behavior.
    window.addEventListener('DOMContentLoaded', () => {
      document.head.append(s);
    });
  } else {
    document.head.append(s);
  }
}
loadScript('{{ helpers.hashForProd('/js/app.js') }}', 'module');
{# Add a facility for pages to declare an array of script paths. #}
{# If no scripts are declared we will use the default page script. #}
{# default.js loads the basic set of custom elements that all pages need. #}

{# Dispatch event to notify that all pageScripts got loaded. #}
{% if pageScripts %}
  let pageScripts = {{ pageScripts | dump | safe }};
  document.addEventListener('scriptLoaded', (e) => {
    const source = e.detail.url.split('?')[0]
    const index = pageScripts.indexOf(source);
    if (index > -1) {
      pageScripts.splice(index, 1);
    }
    if (pageScripts.length === 0) {
      document.dispatchEvent(new CustomEvent('pageScriptsLoaded'));
    }
  })
{% endif %}
{% for item in pageScripts %}
  loadScript('{{ helpers.hashForProd(item) }}', 'module');
{% else %}
  loadScript('{{ helpers.hashForProd('/js/default.js') }}', 'module');
{% endfor %}

{% endset %}
<script>{{ scriptLoader | minifyJs | cspHash | safe }}</script>
