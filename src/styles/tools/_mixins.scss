@use 'sass:list';

@use 'sass:math';

@import '../settings/global';
@import '../settings/type';

// =============================================================================
// MIXINS OVERVIEW
//
// Helpful mixins used throughout the site.
//
// =============================================================================

// sass-lint:disable variable-name-format

// Mixin for element elevations per Google Material specs.

// @param {?number} $level - Elevation height of element via 'box-shadow'
//    property where 1 appears closer to the surface and 5 appears further away.
//    If no value is specified, then 'box-shadow' property is explicitly set
//    to 'none'.
// @param {?string=} $inset - Renders an inset shadow if value is 'inset'
//    and $level is 2.

// Mixin for overflowing text to ellipsis (â€¦).
@mixin ellipsis() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Mixin for exposing hover styles only on devices that support hover
@mixin hover() {
  @media (hover: hover) {
    @content;
  }
}

// Mixin for styling typography via maps containing required integer values for
// font-family, font-size, font-weight, and line-height; with an optional value
// for letter-spacing.
// @param {!map} $specs - SCSS map with key/value pairs for rendering shorthand
//     'font' property.
// @prop {!number} $specs.FONT_WEIGHT
// @prop {!number} $specs.FONT_SIZE
// @prop {!number} $specs.LINE_HEIGHT
// @prop {!string} $specs.FONT_FAMILY
// @prop {?number} $specs.LETTER_SPACING
// @prop {?string} $specs.TEXT_TRANSFORM

// This file will be remove in the future PR
@function calculate_unitless_line_height($line_height, $font_size) {
  @return math.div($line-height, $font-size);
}

@mixin font($specs) {
  $font_weight: map-get($specs, FONT_WEIGHT);
  $font_size: map-get($specs, FONT_SIZE);
  $font_family: map-get($specs, FONT_FAMILY);
  $line_height: map-get($specs, LINE_HEIGHT);

  // Print font styles in shorthand syntax.
  // sass-lint:disable-block indentation
  font: $font_weight list.slash(#{$font_size}px, calculate_unitless_line_height(
      $line_height,
      $font_size
    )) $font_family;
  // sass-lint:enable-block indentation

  // Add letter-spacing if it's defined in the map.
  @if map-has-key($specs, LETTER_SPACING) {
    $letter_spacing: map-get($specs, LETTER_SPACING);
    letter-spacing: #{$letter_spacing}px;
  }

  // Add text-transform if it's defined in the map.
  @if map-has-key($specs, TEXT_TRANSFORM) {
    $text_transform: map-get($specs, TEXT_TRANSFORM);
    text-transform: $text_transform;
  }

  // Add margin-top if it's defined in the map.
  @if map-has-key($specs, MARGIN_TOP) {
    $margin_top: map-get($specs, MARGIN_TOP);
    margin-top: #{$margin_top}px;
  }

  // Add margin-bottom if it's defined in the map.
  @if map-has-key($specs, MARGIN_BOTTOM) {
    $margin_bottom: map-get($specs, MARGIN_BOTTOM);
    margin-bottom: #{$margin_bottom}px;
  }
}

// Mixin for a Material icon. This mimics the important parts of the
// 'material-icons' class defined at http://fonts.googleapis.com/css?family=Material+Icons.
// You can look up the name of an icon at https://material.io/icons/.
@mixin font-material-icon() {
  -moz-osx-font-smoothing: $FONT_SMOOTHING_MOZ; // @alternate
  -webkit-font-smoothing: $FONT_SMOOTHING_WEBKIT; // @alternate
  font: normal normal normal 24px / 1 'Material Icons';
  font-feature-settings: 'liga';
  text-rendering: $FONT_SMOOTHING_RENDERING;
  text-transform: none;
  word-wrap: normal;
}

// Sets font smoothing variables
// @param {string} $moz The value for moz-osx-font-smoothing
// @param {string} $webkit The value for webkit-font-smoothing
// @param {string} $rendering The value for text-rendering
@mixin font-smoothing($moz, $webkit, $rendering) {
  -moz-osx-font-smoothing: $moz;
  -webkit-font-smoothing: $webkit;
  text-rendering: $rendering;
}

// -----------------------------------------------------------------------------
// Typography
//
// Elements should extend these placeholders to get consistent font styles.
// This is recommended over using mixins like @include font($SOME_FONT_MAP).
//
// -----------------------------------------------------------------------------

// For elements that want the standard font-size and line-height that appears
// on the learn and measure pages.
@mixin w-body-text {
  @include font($BODY);

  @media (min-width: 241px) {
    @include font($BODY_XXSMALL);
  }

  @media (min-width: 321px) {
    @include font($BODY_XSMALL);
  }
}

// For elements that want the larger font-size and line-height that appears in
// articles and guides.
@mixin w-article-text {
  @include font($ARTICLE);

  @media (min-width: 241px) {
    @include font($ARTICLE_XXSMALL);
  }

  @media (min-width: 321px) {
    @include font($ARTICLE_XSMALL);
  }
}

@mixin w-headline--one {
  @include font($HEADLINE_1);

  @media (min-width: 241px) {
    @include font($HEADLINE_1_XXSMALL);
  }

  @media (min-width: 321px) {
    @include font($HEADLINE_1_XSMALL);
  }
}

@mixin w-headline--two {
  @include font($HEADLINE_2);

  @media (min-width: 241px) {
    @include font($HEADLINE_2_XXSMALL);
  }

  @media (min-width: 321px) {
    @include font($HEADLINE_2_XSMALL);
  }
}

@mixin w-headline--two-small {
  @include font($HEADLINE_2_ARTICLE);

  @media (min-width: 241px) {
    @include font($HEADLINE_2_ARTICLE_XXSMALL);
  }

  @media (min-width: 321px) {
    @include font($HEADLINE_2_ARTICLE_XSMALL);
  }
}

@mixin w-headline--two-faded {
  @include font($HEADLINE_2_SMALL_CAPS);
  color: $GREY_600;

  @media (min-width: 241px) {
    @include font($HEADLINE_2_SMALL_CAPS_XXSMALL);
  }

  @media (min-width: 321px) {
    @include font($HEADLINE_2_SMALL_CAPS_XSMALL);
  }
}

@mixin w-headline--three {
  @include font($HEADLINE_3);

  @media (min-width: 241px) {
    @include font($HEADLINE_3_XXSMALL);
  }

  @media (min-width: 321px) {
    @include font($HEADLINE_3_XSMALL);
  }
}

// -----------------------------------------------------------------------------
// Overlays
//
// Elements should extend these placeholders to get consistent button overlay
// effects. These are used to tint an interactive control during
// hover/focus/active states.
//
// -----------------------------------------------------------------------------

@mixin w-overlay {
  bottom: 0;
  content: '';
  left: 0;
  pointer-events: none;
  position: absolute;
  right: 0;
  top: 0;
  transition: background-color $TRANSITION_SPEED, border $TRANSITION_SPEED;
  z-index: 1;
}
