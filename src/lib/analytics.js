// Events missing from DevSite include:
//   * "devsite-analytics-observation", generated by the Metric class for page load timing
//   * "devsite-analytics-error", wired up to the onerror handler
//   * "devsite-analytics-set-dimension", for user response to custom questions
//
// Note that many parts of our code are annotated with "gc-analytics-event", but this is actually
// ignored in DevSite v2. Instead, any links that have `data-category` automatically have clicks
// logged (see below).

function getAnalyticsDataFromElement(elem, defaultAction = "click") {
  const category = elem.dataset["category"] || undefined;
  const action = elem.dataset["action"] || defaultAction;
  const label = elem.dataset["label"] || undefined;
  const value = Number(elem.dataset["value"]) || undefined; // must be number, or is ignored
  return {
    category,
    action,
    label,
    value,
  };
}

function trackEvent({category, action, label, value}) {
  ga("send", "event", {
    eventCategory: category,
    eventAction: action,
    eventLabel: label,
    eventValue: value,
  });
}

/**
 * Configure tracking events for any clicks inside `<devsite-analytics-scope>` (which is somewhat
 * inaccurately named, because it is not just config, it _implies_ logging).
 */
document.addEventListener("click", (e) => {
  let curr = e.target.closest("devsite-analytics-scope");
  if (!curr) {
    return;
  }

  const config = {
    category: undefined,
    action: undefined,
    label: undefined,
    value: undefined,
  };

  while (curr) {
    for (const key of config) {
      if (curr.hasAttribute(key)) {
        config[key] = curr.getAttribute(key);
        foundAny = true;
      }
    }
    curr = curr.closest("devsite-analytics-scope");
  }

  trackEvent(config);
});

/**
 * Configure tracking events for any clicks on `<a href="...">`, searching for (requiring at least)
 * `data-category`, but also allowing `data-action`, `data-label` and `data-value`.
 */
document.addEventListener("click", (e) => {
  const link = e.target.closest("a[href]");
  if (!link) {
    return;
  }

  const data = getAnalyticsDataFromElement(link);
  if (!data.category) {
    return; // category is required
  }

  trackEvent(data);
});

/**
 * Configure tracking events for page changes. Emitted in `router.js`.
 */
document.addEventListener("pageview", () => {
  ga("send", "pageview");
});
